// Package quadrant is...
package quadrant

import (
	"fmt"
	//"github.com/msawangwan/unitywebservice/mathf"
)

type point struct {
	x, y, radius float32
}

func newPoint(x, y, r float32) point {
	return point{x: x, y: y, radius: r}
}

func (p *point) String() string { return fmt.Sprintf("Point: <%f, %f> Radius: %f", p.x, p.y, p.radius) }

type node struct {
	point
	subquadrants []*node
	id           int
	depth        int
	label        string
}

func newNode(p point, id int, depth int, label string) *node {
	return &node{
		point:        newPoint(p.x, p.y, p.radius),
		subquadrants: make([]*node, 4),
		id:           id,
		depth:        depth,
		label:        label,
	}
}

func (n *node) String() string {
	return fmt.Sprintf("Quadrant Node: [%s] ID: [%d] Depth: [%d] Label: [%s]", n.point, n.id, n.depth, n.label)
}

type tree struct {
	Root  *node
	Nodes []*node
	id    *idCache
}

func New(int size, pointRadius float32) *tree {
	var r *node
	var idc *idCache

	idc = &idCache{
		next:     -2,
		assigned: make(map[int]bool),
	}

	r = newNode(
		newPoint(0, 0, pointRadius),
		ids.nextID(),
		-1,
		"root_quadrant",
	)

	return &tree{
		Root:  r,
		Nodes: make([]*nodes, 4),
		id:    idc,
	}
}

func CreateNewQuadTree(v mathf.Vector2f) *Node {
	return &Node{
		Links:    make([]*Node, 4),
		Vector2f: mathf.NewVector2f(v.X, v.Y),
	}
}

func (n *Node) AddNewNode(v mathf.Vector2f) {
	node := &Node{
		Links:    make([]*Node, 4),
		Vector2f: mathf.NewVector2f(v.X, v.Y),
	}

	fmt.Printf("enter a new node %v\n", node)

	n.Insert(node)
}

func (n *Node) Insert(other *Node) {
	other.depth = "\tx" + other.depth
	if other.X > n.X && other.Y > n.Y {
		// quad 1
		fmt.Printf("%s quad 1\n", other.depth)
		if n.Links[0] == nil {
			n.Links[0] = other
		} else {
			n.Links[0].Insert(other)
		}
	} else if other.X > n.X && other.Y < n.Y {
		// quad 2
		fmt.Printf("%s quad 2\n", other.depth)
		if n.Links[1] == nil {
			n.Links[1] = other
		} else {
			n.Links[1].Insert(other)
		}
	} else if other.X < n.X && other.Y < n.Y {
		// quad 3
		fmt.Printf("%s quad 3\n", other.depth)
		if n.Links[2] == nil {
			n.Links[2] = other
		} else {
			n.Links[2].Insert(other)
		}
	} else if other.X < n.X && other.Y > n.Y {
		// quad 4
		fmt.Printf("%s quad 4\n", other.depth)
		if n.Links[3] == nil {
			n.Links[3] = other
		} else {
			n.Links[3].Insert(other)
		}
	}
}

func (n *Node) String() string {
	return fmt.Sprintf("%v %v", n.X, n.Y)
}
